{{- if and .Values.rbac.create .Values.podSecurityPolicy.enabled -}}
{{- $useHostNetwork := .Values.daemonset.useHostNetwork -}}
{{- $useHostPort := .Values.daemonset.useHostPort -}}
{{- $hostPorts := .Values.daemonset.hostPorts -}}
{{- if .Capabilities.APIVersions.Has "policy/v1/PodSecurityPolicy" }}
apiVersion: policy/v1
{{- else }}
apiVersion: policy/v1beta1
{{- end }}
kind: PodSecurityPolicy
metadata:
  name: {{ include "haproxy.fullname" . }}
  namespace: {{ template "haproxy.namespace" . }}
  labels:
    {{- include "haproxy.labels" . | nindent 4 }}
{{- if .Values.podSecurityPolicy.annotations }}
  annotations:
{{ toYaml .Values.podSecurityPolicy.annotations | indent 4 }}
{{- else }}
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
{{- end }}
spec:
  allowPrivilegeEscalation: false
  allowedCapabilities:
    - NET_BIND_SERVICE
  defaultAllowPrivilegeEscalation: false
  fsGroup:
    rule: MustRunAs
    ranges:
      - max: 65535
        min: 1
{{- if $useHostNetwork }}
  hostNetwork: true
{{- end }}
{{- if or $useHostPort $useHostNetwork }}
  hostPorts:
{{- range $key, $value := .Values.containerPorts }}
  - min: {{ $value }}
    max: {{ $value }}
{{- end }}
{{- end }}
  hostIPC: false
  hostPID: false
  privileged: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
      - max: 65535
        min: 1
  volumes:
    - configMap
    - emptyDir
    - projected
    - secret
  {{- with .Values.podSecurityPolicy.allowedUnsafeSysctls }}
  allowedUnsafeSysctls:
  {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
